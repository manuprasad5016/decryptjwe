// DEPENDENCIES
//const jose = require("jose");
//const {v4: uuidv4} = require('uuid');
//const jwt = require('jsonwebtoken');

const express = require("express");
var path = require("path");
var bodyParser = require("body-parser");
var cookieParser = require("cookie-parser");
const cors = require("cors");
const colors = require("colors");
const crypto = require("crypto");
//var MyInfoConnector = require("myinfo-connector-v4-nodejs");
const fs = require("fs");

const jose = require("jose");
const jwt = require("jsonwebtoken");
const {v4: uuidv4} = require("uuid");

const app = express();
const port = 3001;
//const config = require("./config/config.js");
//const connector = new MyInfoConnector(config.MYINFO_CONNECTOR_CONFIG);

//var sessionIdCache = {};

app.use(express.json());
app.use(cors());

app.set("views", path.join(__dirname, "public/views"));
app.set("view engine", "pug");

app.use(express.static("public"));

app.use(bodyParser.json());
app.use(
  bodyParser.urlencoded({
    extended: false,
  })
);
app.use(cookieParser());




// Manu Below getPersonData function - call MyInfo Token + Person API
app.post("/getPersonData", async function (req, res, next) {
  try {
console.log('Manu 01');
      /*
    ***** FUNCTION TO RETURN base64 OUTPUT *****
*/
function base64(text) {
  return(Buffer.from(text).toString('base64'))
}

/*
    ***** FUNCTION TO RETURN base64 DECODED OUTPUT *****
*/
function base64Decode(base64Text) {
  return(Buffer.from(base64Text, 'base64').toString('ascii'))
}
/*
    ***** FUNCTION TO RETURN STRINGIFY OUTPUT *****
*/
function stringify(json) {
  return JSON.stringify(json,null);
}
/*
    ***** FUNCTION TO RETURN PRIVATE KEY IN PKCS8 FORMAT *****
*/
const importKey = async(key) => {
  const importedKey = await jose.importJWK(key, 'ES256')
  const privateKeyPKCS8 = await jose.exportPKCS8(importedKey);
  return privateKeyPKCS8;
}

/*
    ***** FUNCTION TO GENERATE JWT ******
*/
const getJWT = async (iss, sub, kid, aud, text, privateKey, thumbprint) => {

  /*
      ***** GET THE PKCS8 Signing Key *****
      This can be from a file or generated by a JWK in Endian format.
  */
  // const caPrivateKey = fs.readFileSync('./private.key', 'utf8');
  const caPrivateKey = await importKey(privateKey);

  const signOptions = {
    algorithm: 'ES256',
    keyid: kid,
    expiresIn: '180s',
    jwtid: uuidv4(),
    issuer: iss,
    audience: aud,
    subject: sub,
  };

  const payload = {

    // BASE64 of the payload
    payload: base64(text),

    // Thumbprint of the encryption key
    cnf: {
      jkt: thumbprint
    }
  };

  /*
      ***** CREATE JWT *****
      The JWT is created here to be used for the authentication header.
  */
  const jwtAuth = jwt.sign(payload, caPrivateKey, signOptions);
  const jwtDecoded = jwt.decode(jwtAuth,{complete:true});
  console.log(`Publisher Generated Nested JWT-\n${jwtAuth}\n`);

  return jwtAuth;
};

/*
    ***** CREATE JWE *****
    The JWE is created here.
*/
const encryptFunction = async function(generatedJwt,publicKey){

  const jwe = await new jose.CompactEncrypt(
    new TextEncoder().encode(generatedJwt),
  )
    .setProtectedHeader({ alg: 'ECDH-ES+A256KW', enc: 'A256GCM' })
    .encrypt(publicKey)
  console.log(`Publisher JWE-\n${jwe}\n`)
  return jwe;
}

/*
    ***** DECRYPT JWE *****
    The JWE is decrypted here.
*/
	  var actualPayload;
const decryptFunction = async function(jwe,privateKey){

  const { plaintext, protectedHeader } = await jose.compactDecrypt(jwe, privateKey)
  const decryptedJwt = await new TextDecoder().decode(plaintext);

  const jwtDecoded = await jwt.decode(decryptedJwt,{complete:true});
  const nestedJwt = stringify(jwtDecoded);
  actualPayload = base64Decode(jwtDecoded.payload.payload);

  console.log(`Consumer Decrypted Nested JWT-\n${stringify(jwtDecoded)}\n`);
  console.log(`Consumer Decrypted Actual Payload-\n${actualPayload}\n`);

  return {decryptedJwt, nestedJwt, actualPayload}
}
    
    // Execution of the program
const api = async function(){

  // This is encryption key from Consumer's JWKS endpoint
  const publicEncryptionKey={
    kty: 'EC',
    crv: 'P-256',
    use: 'enc',
    kid: 'apex-example-encrypt',
    x: 'lZU3Ic1QHBE5Ch9YajxQlqPicJL8lemiWfJga13RZrI',
    y: 'ddqibUSW8DiYexc4IUokdPYEcq5UO9grbaj13PkHGhM',
  }

  // Private key belonging to Consumer //Manu
  const privateEncryptionKey={
    kty: 'EC',
    crv: 'P-256',
    use: 'enc',
    kid: 'apex-example-encrypt',
    x: 'lZU3Ic1QHBE5Ch9YajxQlqPicJL8lemiWfJga13RZrI',
    y: 'ddqibUSW8DiYexc4IUokdPYEcq5UO9grbaj13PkHGhM',
    d: 'LUiL_tup7W-vapMlu2NpyTtFv73H1zETj-Oyr8UChzY'
  }

  // This is signing key from Publisher's JWKS endpoint
  const publicSigningKey = {
    kty: 'EC',
    crv: 'P-256',
    x: 'usZhq9AL4aC-hkzGCBK3RuJjmxKE6zqEdFyp-tQ8kh4',
    y: 'wHI1r6rQCHQQSAdNxaJDA0Tw5Fq3B-icq-mbMVlLZA4',
    use: 'sig',
    kid: 'apex-example-sign',
    alg: 'ES256',
  };

    // Private key belonging to Publisher
    const privateSigningKey = {
    kty: 'EC',
    crv: 'P-256',
    x: 'usZhq9AL4aC-hkzGCBK3RuJjmxKE6zqEdFyp-tQ8kh4',
    y: 'wHI1r6rQCHQQSAdNxaJDA0Tw5Fq3B-icq-mbMVlLZA4',
    d: 'w55YEByLRumO-Rnsc8jg2_MaYXfEiT_ioFVoGgrCTlg',
    use: 'sig',
    kid: 'apex-example-sign',
    alg: 'ES256',
  };

  // Variables for Publisher to carry out Nested JWT Signing
  const issuer = 'EXAMPLE PUBLISHER ORG-PROJECT TEAM';
  const subject = 'EXAMPLE PUBLISHER ORG-PROJECT TEAM';
  const keyId = publicSigningKey.kid
  const audience = 'https://public.api.gov.sg/agency/api';
  const thumbprint = await jose.calculateJwkThumbprint(publicEncryptionKey);
  const text = `It's a dangerous business, Frodo, going out your door.`;

  // PUBLISHER CREATES NESTED JWT
  // Assuming that the Publisher has already gotten the Consumer's encryption key from JWKS endpoint
  const generatedJwt = await getJWT(issuer, subject, keyId, audience, text, privateSigningKey, thumbprint);

  const josePublicKey = await jose.importJWK(publicEncryptionKey,'ES256')
  const josePrivateKey = await jose.importJWK(privateEncryptionKey,'ES256')
	console.log('One Manu-->+josePrivateKey);

  // PUBLISHER CREATES ENCRYPTED JWE
  const encrypted = await encryptFunction(generatedJwt, josePublicKey);
//const encrypted = 'eyJlbmMiOiJBMjU2Q0JDLUhTNTEyIiwiYWxnIjoiRUNESC1FUytBMjU2S1ciLCJraWQiOiJXRFMtRU5DUllQVC1PUFJQLURFVi1SUEJST0tFUiIsImVwayI6eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6Im5LRXI0NU10T0JwQi1HSUtfUG1wRWRxeXJha0pUX1I1a19PUEt2TllyVlEiLCJ5IjoibjhmZ0ozZmFoODBUVThTRktNOFc1WFdzZVFYTEVMaHVZckcwXzc1NGg2byJ9fQ.vigG8HXYPVniOz5Far8mKk_micoFjpOR0kPPmWaUKs67pGEruP01pEue1K6_6rPEZrHcCcaRjofCzl-Gwe6TPvZKINM6Lnj4.cQfmUGlt1xf2ARUvBG12gg.YwOKegtWKaHN4Uka0zJ2ySMDXGdqIwCdA8U5xyWum5lRrmO-CMMLtM0O2LymQJ-xgXNsPbI9_blOxFEX_00VAM-yHM5aKjRoPQc9Db-Y91v7emqqhgbzzTiie-tEF-BX3inHil_PZjbg2F9xo_SsWQdGQsG7PhlSJNREHBKHtR7_NjweTuVC6FgmTw9sXmmtGOZb9SAwENp6cRO4FpmZ8U5vPGioUf1qne6yLaUzUjzF2ZF4SnwVJfehFetzvP5Xy0usOnEezoCu4sg_LAETy-axjHMD80cbvvrcfOIiG11l7Ou0T6bcoXj62yTk4Ime0_15uQHaXwZA3PjuUJ4SIevXRyMUVYjupFS8FaYzWwVHyTuUiulSWGDa7kJVOYLzCQvZd-6HTgHFUIR0osxaVuDGo0StOmUYWIfzfkrl42-3gaixNuP2688vd9vG22zcAnDI_p3YJQWpetgQxxhGkV7uqufij39muDMCB0E3RAS17W23bPeGdlxr88NyzX6JaEb2tYS1su7Ia-p_FH1JvLOp0s08bmVktbjLOdhOLEwsNzkohzj9EfWpZFhCy_5ABKM6mZJROnhTq3Qckkt1YSRin9Nr8OL-aUtN-2gYcMRHn1n7JWj0bX1LZftFY4NP2vGZQGG1wQXI4ICTxVoLFfIaOicbkk9u3e6s-iEgPcFsrKd2CGHpnNan395Fi-GZCfF-qP23IBJazQtf7CxFlB8v2nIYjtMQledReEIKdYvkvdbUt2fq0RuMhthV3DQxQj_PEgcz9HuT7henEheW26DDiW2iwYFP9fg-TLDN23ZITFblqZfpBADQZ7qAsWnNtosr46io10QS7EizH4XuSaQTbC1XYupEh3KleVKhuOQoxHfM2co0Dz7YyO3pdfC4GrySqiiQZqljaoZbHVJX6m46BYiK3g8705TFX35tp10RKdub7udYlUwhT0qKyvkuJmSyehIuCe4_fbXTltU0QnAUuVXeOdfxYL6YbPrPyT5CJBiNkADEH_AlsUBL0x32vRF6ClYjiRWiLjxCWkgo5HFSJNUmo_adTc7SdVzCQTUvbBA7MmEenWjFssraRovXQKFYt5T3uQ9aJMlHLkQC2jQ0vfn2fyDllQuD7bWq4G6drtuCoWinOkhCBzpMGTi7pryGBuK7JeGG2he_OufbitL5B6t72TUqmCU2U-QoKPxkh_uEDBAmbxfrN9QBKu5uRaYP1lIw6ENZiizUeTRpUsHxsZwxE0Kgw3X_8s-1wiSVuVoRyEtTklGWENAbY4eOP1LNTWDXyzCvopoJzv4bQ4DTLHnAMq4wBrfQa2KQjfwSJvUbIzElGeaEP1qRmXCryxfBjeIEKblPU6eI5EHHYkccvz24uy2aKPtcG9VlJ5JQnY-0Qy_FVJbkOKG7-KLAxh5b-Y6V2wOILtip7jIM9w3kCWElYnWIWPFkrtjniUXPh-t6voz4Elt8deYvhczjqfY5znMzwzNpqOHXyCLf-M3nqYm-7DUwhgp7qnkwk-272VHCpbvcICpuEcadOrIaEOmMIL-PQ4u9Ync6WPEY584EEM3sZeCTZqjjAZjN_bpWYrQlJiqRRi4mr400mT74.vTm7_mmci8_fl7acyJW3C9KtRNEDLfp2eCscGfRhHJU';
	

  // CONSUMER DECRYPTS JWE
  // Do note that validation of Nested JWT and other security measures are not in the sample code
	console.log('Two Manu-->+encrypted);
  const {decryptedJwt, jwePayload, nestedJwt, actualPayload} = await decryptFunction(encrypted, josePrivateKey);
  console.log('Manu 02-->'+JSON.stringify(actualPayload)); // log the data for demonstration purpose only
  
    res.status(200).send(actualPayload); //return personData
    
	}
	api(); 
  } 
  catch (error) {
    console.log("---MyInfo NodeJs Library Error---");
    console.log(error);
    res.status(500).send({
      error: error,
    });
  }
  
});

// catch 404 and forward to error handler
app.use(function (req, res, next) {
  var err = new Error("Not Found");
  err.status = 404;
  next(err);
});

// error handlers
// print stacktrace on error
app.use(function (err, req, res, next) {
  res.status(err.status || 500);
  res.render("error", {
    message: err.message,
    error: err,
  });
});

app.listen(port, () =>
  console.log(`Demo App Client listening on port ${port}!`)
);
